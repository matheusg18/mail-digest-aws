AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  mail-digest-backend

  Backend for the MailDigest application, containing a scheduled task for summaries and a webhook for Telegram.

Globals:
  Function:
    Timeout: 30
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
    Tags:
      Project: mail-digest
      ManagedBy: SAM
  Api:
    TracingEnabled: true

Resources:
  SummaryJobQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "MailDigest-SummaryJobQueue"
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SummaryJobDLQ.Arn
        maxReceiveCount: 3

  SummaryJobDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "MailDigest-SummaryJobDLQ"

  DailySummaryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 60
      CodeUri: src/
      Handler: daily_summary_handler.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SummaryJobQueue.QueueName
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref SummaryJobQueue
      Events:
        DailySummaryTrigger:
          Type: Schedule
          Properties:
            Schedule: "cron(0 23 * * ? *)"
            Name: MailDigest-DailyTrigger
            Description: Aciona o dispatcher de resumos diários

  SummaryWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 300
      CodeUri: src/
      Handler: summary_worker_handler.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Events:
        SummaryJobQueueTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt SummaryJobQueue.Arn
            BatchSize: 1

  TelegramWebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: telegram_webhook_handler.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Events:
        TelegramWebhook:
          Type: Api
          Properties:
            Path: /telegram-webhook
            Method: post

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"

Outputs:
  TelegramWebhookApi:
    Description: API Gateway endpoint URL for Telegram Webhook function
    Value: !Sub "https://://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/telegram-webhook/"
  DailySummaryFunctionArn:
    Description: ARN da função Lambda "Dispatcher" de Resumo Diário
    Value: !GetAtt DailySummaryFunction.Arn
  SummaryWorkerFunctionArn:
    Description: ARN da função Lambda "Worker" de Resumo
    Value: !GetAtt SummaryWorkerFunction.Arn
  SummaryJobQueueUrl:
    Description: URL da fila SQS para os trabalhos de resumo
    Value: !Ref SummaryJobQueue

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: sa-east-1
  PYTHON_VERSION: '3.12'

jobs:
  # Lint and Test Job
  test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev

    - name: Run linting
      run: poetry run task lint

    - name: Run formatting check
      run: poetry run ruff format --check

    - name: Run tests
      run: poetry run task test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security and Quality Checks
  security:
    name: Security and Quality
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --with dev

    - name: Run security checks
      run: |
        poetry run pip install bandit safety
        poetry run bandit -r src/ -f json -o bandit-report.json || true
        poetry run safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Build and Package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --with dev

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::012985018244:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Build SAM application
      run: sam build --use-container

    - name: Upload SAM build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sam-build
        path: .aws-sam/

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::012985018244:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Download SAM build artifacts
      uses: actions/download-artifact@v3
      with:
        name: sam-build
        path: .aws-sam/

    - name: Deploy to production
      run: |
        sam deploy \
          --config-env prod \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --capabilities CAPABILITY_IAM

    - name: Get deployment outputs
      run: |
        aws cloudformation describe-stacks \
          --stack-name mail-digest-lambda-prod \
          --query 'Stacks[0].Outputs' \
          --output table

  # Integration Tests (Post-Deployment)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-prod
    if: always() && needs.deploy-prod.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --with dev

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::012985018244:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}

    - name: Run integration tests
      run: |
        # Set environment variables for integration tests
        export ENVIRONMENT=prod
        poetry run pytest tests/integration/ -v

  # Notify on Failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, security, build, deploy-prod, integration-tests]
    if: always() && (needs.test.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure' || needs.deploy-prod.result == 'failure' || needs.integration-tests.result == 'failure')
    
    steps:
    - name: Notify failure
      run: |
        echo "One or more jobs failed in the CI/CD pipeline"
        echo "Check the GitHub Actions logs for more details"
        # Add your notification logic here (Slack, email, etc.) 